.data
frameBuffer: .space 0x10000

.macro RST_FRAMEPTR
la $a3, frameBuffer 
.end_macro

.macro RST_TICKER
li $t9, 0
.end_macro

.macro RST_TICKER_2
li $t8, 0
.end_macro

.macro stack_push
addi $sp, $sp, -4
.end_macro

.macro stack_pop
addi $sp, $sp, 4
.end_macro

.text
la $a3, frameBuffer ## loads address of frame buffer into $a3$
addi $t1, $a3, 0x40000 ##max size of frame buffer is arr width * arr length * bitwidth
RST_TICKER
li $t3, 0x0000FF #loads color 1 into $t9
li $a2, 0xFFFFFF #loads color 2 into $t3


main:

jal paint_background
RST_FRAMEPTR
addi $a3, $a3, 8192 ##moving position, make parametric 
jal paint_L

RST_FRAMEPTR
add $a3, $a3, 32
jal paint_X

RST_FRAMEPTR
add $a3, $a3, 64
jal paint_S

RST_FRAMEPTR
add $a3, $a3, 128
jal paint_F
RST_FRAMEPTR
add $a3, $a3, 160
jal paint_R

RST_FRAMEPTR
add $a3, $a3, 192
jal erase_char
li $v0, 10
syscall

paint_background:
addi $a2, $zero, 0xffe6ba
start_paint:
beq $a3, $t1, exit_paint #if reach end, branch to exit paint
sw $a2, 0($a3) #store colore $t9 into the address of $a3
addi $a3, $a3, 4 #add into $a3, $a3 + 4
j start_paint #jump back to start
exit_paint:
jr $ra

paint_L:
RST_TICKER ## resets counter variable
addi $a2, $zero, 0xff6e7f
beq $a3, $t1, exit_paint_L ## until framePTR = maxFrame
vertical_line_loop: 
bgt $t9, 5, vertical_line_loop_end ### t2 used as increment CTR
sw $a2, 0($a3)
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $a3, $a3, 1020 ### skip row - 1 because of the length of the width of L stem
sw $a2, 0($a3)
addi $t9, $t9, 1 ## incrementing small ticker
j vertical_line_loop
vertical_line_loop_end: ### stem drawn
li $t9, 0 
horizontal_line_loop:
addi $t9, $t9, 1 ### incrementing ticker again, register-conservey but annoying
horizontal_line_loop_row: ### draws the two long sides of the L
beq $t9, 8, row_loop_end
beq $t9, 18, horizontal_line_loop_end
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $t9, $t9, 1
j horizontal_line_loop_row
row_loop_end:
addi $a3, $a3, 992
addi $t9, $t9, 1
j horizontal_line_loop
horizontal_line_loop_end:
exit_paint_L:
RST_TICKER
jr $ra

paint_X:
addi $a3, $a3, 7168
addi $a2, $zero, 0xff0000
RST_TICKER
forward_slash:
beq $t9, 8, forward_slash_done
sw $a2, 0($a3)
beq $t9, 3, skip_center_up_done
addi $a3, $a3, 4
sw $a2, 0($a3)
skip_center_up_done:
addi $a3, $a3, -1024
addi $t9, $t9, 1
j forward_slash
forward_slash_done:
RST_TICKER
addi $a3, $a3, 996
back_slash:
beq $t9, 8, back_slash_done
sw $a2, 0($a3)
beq $t9, 3, skip_center_down_done
addi $a3, $a3, 4
sw $a2, 0($a3)
skip_center_down_done:
addi $a3, $a3, 1024
addi $t9, $t9, 1
j back_slash
back_slash_done:
exit_paint_X:
RST_TICKER
jr $ra

paint_S:
RST_TICKER
RST_TICKER_2
addi $a2, $zero, 0x919191
paint_S_row_loop:
beq $t8, 8, paint_S_row_loop_end
RST_TICKER
paint_S_column_loop:
beq $t9, 8, paint_S_column_loop_end
sw $a2, 0($a3)
addi $a3, $a3, 4
addi $t9, $t9, 1
j paint_S_column_loop
paint_S_column_loop_end:
addi $a3, $a3, 992
addi $t8, $t8, 1
j paint_S_row_loop
paint_S_row_loop_end:
RST_TICKER
RST_TICKER_2
exit_paint_S:
jr $ra

paint_F:
addi $a3, $a3, 2048 
addi $a2, $zero, 0x57d5de
RST_TICKER
paint_F_flat_top:
beq $t9, 6, paint_F_flat_top_end ### draws the first row of the 'pill' shape
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $t9, $t9, 1
j paint_F_flat_top
paint_F_flat_top_end: ## end of top row
addi $a3, $a3, 996
RST_TICKER
RST_TICKER_2
paint_F_BODY: ### draws three rows of pill
RST_TICKER
beq $t8, 3, paint_F_BODY_exit
body_width:
beq $t9, 8, paint_f_body_width_end
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $t9, $t9, 1
j body_width
paint_f_body_width_end:
addi $a3, $a3, 992
addi $t8, $t8, 1
j paint_F_BODY
paint_F_BODY_exit:  ## end draw three rows
RST_TICKER
addi $a3, $a3, 4 ### shunt forward 1 px to give rounded edge
paint_F_flat_bottom: ### draw bottom row of pill
beq $t9, 6, paint_F_flat_bottom_end
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $t9, $t9, 1
j paint_F_flat_bottom
paint_F_flat_bottom_end:
exit_paint_F:
RST_TICKER
RST_TICKER_2
jr $ra


paint_R:
RST_TICKER
RST_TICKER_2
addi $a2, $zero, 0xfcba47
paint_R_stem:
beq $t8, 8, paint_R_stem_end
RST_TICKER
paint_R_stem_width_loop:
beq $t9, 3, paint_R_stem_width_loop_end
sw $a2, 0($a3)
addi $a3, $a3, 4
addi $t9, $t9, 1
j paint_R_stem_width_loop
paint_R_stem_width_loop_end:
addi $a3, $a3, 1012
addi $t8, $t8, 1
j paint_R_stem
paint_R_stem_end:
RST_TICKER
RST_TICKER_2
addi $a3, $a3, -8180
paint_R_top_loop:
beq $t9, 4, paint_R_top_loop_end
sw $a2, 0($a3)
addi $a3, $a3, 4
addi $t9, $t9, 1
j paint_R_top_loop
paint_R_top_loop_end:
addi $a3, $a3, 1020
sw $a2, 0($a3)
addi $a3, $a3, 1024
sw $a2, 0($a3)
RST_TICKER
addi $a3, $a3, 1012
paint_R_middle_loop:
beq $t9, 4, paint_R_middle_loop_end
sw $a2, 0($a3)
addi $a3, $a3, 4
addi $t9, $t9, 1
j paint_R_middle_loop
paint_R_middle_loop_end:
addi $a3, $a3, 1004
RST_TICKER
paint_R_leg_down:
beq $t9, 4, paint_R_leg_down_end
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $a3, $a3, 4
sw $a2, 0($a3)
addi $a3, $a3, 1020
addi $t9, $t9, 1
j paint_R_leg_down
paint_R_leg_down_end:
RST_TICKER
RST_TICKER_2
paint_R_exit:
jr $ra

erase_char:
RST_TICKER
RST_TICKER_2
addi $a2, $zero, 0xffe6ba
stack_push
sw $ra 0($sp)
jal paint_S_row_loop
return_from_paint_S:
lw $ra 0($sp)
stack_pop
jr $ra
